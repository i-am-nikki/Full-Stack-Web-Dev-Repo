// Array to store the sequence of button colors generated by the game
let gameSeq = [];

// Array to store the sequence of button colors selected by the user
let userSeq = [];

// Boolean flag to indicate whether the game has started or not
let started = false;

// Variable to track the highest score
let highestScore = 0;

// Keeps track of the current level
let level = 0;

// Reference to the h2 element for displaying level information
let h2 = document.querySelector('h2');

// Reference to the start button element
let startbtn = document.querySelector('.start-btn')

// Array containing strings representing button colors
let btns = ["witching-hour", "kyoo-pal", "by-design", "wiretap"];

// Event listener for key press to start the game
document.addEventListener('keypress', function () {
    if (started == false) {
        started = true;
        levelUp();
    }
});

// Event listener for clicking the start button
startbtn.addEventListener('click', function () {
    if (started == false) {
        started = true;
        startbtn.innerText = "Started";
        levelUp();
    }
})

// Function to create a flashing effect for a button
function btnFlash(btn) {
    btn.classList.add('flash');

    setTimeout(function () {
        btn.classList.remove('flash');
    }, 250);
}

// Function to handle the level up process
function levelUp() {
    userSeq = [];
    level++;
    h2.innerText = `Level ${level}`;

     // Choose a random button color and add it to the game sequence
    let randIdx = Math.floor(Math.random() * 4);
    let randColor = btns[randIdx];
    let randBtn = document.querySelector(`.${randColor}`);
    gameSeq.push(randColor);
    btnFlash(randBtn);
}

// Function to check user's answer at a specific index
function checkAns(idx) {
    // let idx= level-1;

    if (userSeq[idx] === gameSeq[idx]) {
        if (userSeq.length == gameSeq.length) {
            setTimeout(levelUp, 1000);
        }
    } else {
        // Update the highestScore if necessary
        if (level > highestScore) {
            highestScore = level;
        }
        // Game over scenario
        h2.innerHTML = `Game Over! Your score is: <b style="color: orange"  >${level}</b> <br>
        Highest Score was: <b style="color:orange">${highestScore}</b><br> Press any key to start. `
        startbtn.innerText = "Start";
        document.body.style.backgroundColor = 'red';

        // Reset background color after a short delay
        setTimeout(function () {
            document.body.style.backgroundColor = "black";
        }, 250);
         // Reset the game state
        reset();
    }
}

// Function to handle button press
function btnPress() {
    let btn = this;
    btnFlash(btn);

    // Get the color of the pressed button and add it to the user's sequence
    let userColor = btn.getAttribute('id');
    userSeq.push(userColor);

    // Check the user's answer
    checkAns(userSeq.length - 1);
}

// Add click event listeners to all buttons
let allBtns = document.querySelectorAll('.btn');
for (btn of allBtns) {
    btn.addEventListener('click', btnPress);
}

// Function to reset the game state
function reset() {
    started = false;
    gameSeq = [];
    userSeq = [];
    level = 0;
}